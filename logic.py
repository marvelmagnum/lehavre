# AI LOGIC DRAFT
# *** AI goes for fulfilling food requirement for the round. After that targets most points. ***
#
# Things that generate food
# -------------------------
# - money / food / ship
#
# Things that generate points
# ---------------------------
# - money
# 	- from supply
# 	- from shipping
# - building value
# - ship value
# - reduce loan
#
#
# Bias Modifiers
# ==============
# 1. normal modifier (money / food / items) = 1
# 2. dependency modifier (from food objectives) = x1.5 (items that are required to fulfill other objectives
# 3. building modifiers
# 	a) construction items = x1.3
# 	b) purchase price = x1.1
# 4. ship modifiers
# 	a) construction items = x1.4
# 	b) purchase price = x1.2
# 5. loan modifiers (reduce loan) = x1.05
#
#
# artifacts (items generated by ai)
# ---------
# - primary bias list (list of items (with modifiers) which helps determine which supply to collect
# - primary job - an building action (single action that returns the highest value(points or food))
# - auxilary job list (additional actions that ai might determine)
#
# LOGIC PSUEDO (computes an action (supply or building) alongside auxilary actions if reqd)
# ============
# ** Supply goal is determined if no suitable job (building action) can be found **
#
# (primary) *compute main phase goal first*
# => check if round end food req is satisfied.
# => if not satisfied, (food AI) ignore (point AI)
# => determine source of max points (point AI)
#
# (supply) *supply phase goal is now determined based on results from primary logic*
# => a primary bias list for items is generated from the primary objectives (with dependency modifier)
# => add remaing items in supply to the list with default modifier
# => find highest value and collect that supply
#
# **FOOD AI** (determines most food path)
# 1> ship logic:
# - if can afford to purchase (add auxilary action - buy ship)
# - check ship building resouce available
# ---> if available in inventory
# ----------> check unoccupied wharf exists
# ------------------> if unoccupied (select primary job - build ship)
# ------------------> else cancel ship logic (wait for wharf to free next turn)
# ---> if available in supply [adds ship contruction material with dependency modifier]
#
# 2> supply logic:
# - compute food value of supply [adds food items with dependency modifier]
#
#
# **POINTS AI** (determines points path. follows the order while tracking max point gained and selects action if it wins)
# 1> shipping logic:
# - check unoccupied shipping line exists
# - check inventory items shipping value
# - check finished product shipping value for inventory items
# ---> if unoccupied factory building exists note final shipping value (select primary job - manufacture finished product)
# --------> calculate energy rqd for shipment.  if energy in inventory (select primary job - shipping line)
# --------------> if unoccupied energy source available, collect (select primary job - energy source)
# --------------> if energy source building available, (construct logic)
# --------------> else cancel shipping objectives (not possible atm)
# ---> if factory building available, (construct logic)
# ---> else finished product shipping value is 0 atm (not possible to obtain)
#
# 2> construction logic:
# - if building not already finalized before (eg. from shipping) check for max value of available buildings
# ---> if can afford to purchase (add auxilary action - buy building)
# ---> else if building material in inventory
# -----------> check an unoccupied construction house exists
# ----------------------> if unoccupied (select primary job - build building)
# ----------------------> cancel construction logic (wait for a construction building to free up)
# ---> if available in supply [adds building materials and money(for purchase) with building modifiers]
#
# 3> loan logic: 2 points per loan  (7 pts penalty - 5 to repay)
# [adds money with loan modifiers]
# ======================================================================================================================


class Logic:
    def process_ai(self, game_state, ai_player):
        """ Determines AI entity's move """
        ''' find round feeding req '''
        pl_count = len(game_state.players)
        feeding_req = game_state.harvest_stack[len(game_state.harvest_stack)-1].harvest[pl_count][2]
        avail_food, food_items = ai_player.get_avail_food()
        reserve_food = avail_food + ai_player.get_ship_food(game_state)
        if reserve_food < feeding_req:
            ''' food shortage : process food ai '''
        else:
            ''' food available. process points ai '''

        print("Feeding target for AI: " + str(feeding_req))
        return True
